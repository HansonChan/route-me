#summary Guidelines for developers participating in the Route-Me project.
#labels Phase-Implementation,Featured

= Code Repository =

Don't break the trunk. Before you commit code to the trunk, please test it against samples/SampleMap in both Release and Build configurations. 

Work on one thing at a time. Each commit should address one specific change. If your commit breaks someone else's project, it's easier for that person to back out a focused commit than to back out a commit that touches bit and pieces of a dozen files.

If your work might break the trunk, then just use a branch for your intermediate commits, and we'll merge it over when you're finished. By convention, we label branches after the bugtracker Issue Number. The code for Issue 59 is in branches/issue59.

Long, descriptive commit messages are welcome. If your commit message summarizes what you did, it saves everyone from having to look at the code diffs, or at the Issue Tracker. "consolidated ivars foo, bar, and plugh into xyzzy in class RMContents, closes issue 982" is much better than "fixed issue 982".

The issue tracker and source code control system know about each other. If you refer to "r250" or "issue 29" in the issue tracker, commit message, or comments, a hyperlink is set up automatically.

Before adding or removing substantial functionality, lay out your idea on the mailing list. Listen to the feedback you receive. Open a bugtracker ticket, and assign yourself as owner.

= Design Notes =

Route-Me is single-threaded by design. All external calls should come from your main (UI) thread.

= Coding Style =

Use RMLog() where you might normally want to use NSLog(). RMLog is defined as a macro, so that it works as NSLog in Debug builds, and disappears in Release builds. You may also use LogMethod() if you simply want a method trace logged to the console.

Adhere to Apple Cocoa naming conventions. Camel case the parameter names, with initial letter lowercase. The preposition "with" should appear at most once in a method name.

Class names are always uppercase, and are always defined in files with the same name as the class. 

Use bindings-compatible accessors. If the "setXyzzy" method exists, it must modify the "xyzzy" instance variable of its class.